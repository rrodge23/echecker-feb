/**
 * Plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2017 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/**
 * This class contains all core logic for the code plugin.
 *
 * @class tinymce.visualblocks.Plugin
 * @private
 */
define(
  'tinymce.plugins.visualblocks.Plugin',
  [
    'tinymce.core.PluginManager'
  ],
  function (PluginManager) {
    PluginManager.add('visualblocks', function (editor, url) {
      var cssId, visualBlocksMenuItem, enabled;

      // We don't support older browsers like IE6/7 and they don't provide prototypes for DOM objects
      if (!window.NodeList) {
        return;
      }

      function toggleActiveState() {
        var self = this;

        self.active(enabled);

        editor.on('VisualBlocks', function () {
          self.active(editor.dom.hasClass(editor.getBody(), 'mce-visualblocks'));
        });
      }

      editor.addCommand('mceVisualBlocks', function () {
        var dom = editor.dom, linkElm;

        if (!cssId) {
          cssId = dom.uniqueId();
          linkElm = dom.create('link', {
            id: cssId,
            rel: 'stylesheet',
            href: url + '/css/visualblocks.css'
          });

          editor.getDoc().getElementsByTagName('head')[0].appendChild(linkElm);
        }

        // Toggle on/off visual blocks while computing previews
        editor.on("PreviewFormats AfterPreviewFormats", function (e) {
          if (enabled) {
            dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type == "afterpreviewformats");
          }
        });

        dom.toggleClass(editor.getBody(), 'mce-visualblocks');
        enabled = editor.dom.hasClass(editor.getBody(), 'mce-visualblocks');

        if (visualBlocksMenuItem) {
          visualBlocksMenuItem.active(dom.hasClass(editor.getBody(), 'mce-visualblocks'));
        }

        editor.fire('VisualBlocks');
      });

      editor.addButton('visualblocks', {
        title: 'Show blocks',
        cmd: 'mceVisualBlocks',
        onPostRender: toggleActiveState
      });

      editor.addMenuItem('visualblocks', {
        text: 'Show blocks',
        cmd: 'mceVisualBlocks',
        onPostRender: toggleActiveState,
        selectable: true,
        context: 'view',
        prependToContext: true
      });

      editor.on('init', function () {
        if (editor.settings.visualblocks_default_state) {
          editor.execCommand('mceVisualBlocks', false, null, { skip_focus: true });
        }
      });

      editor.on('remove', function () {
        editor.dom.removeClass(editor.getBody(), 'mce-visualblocks');
      });
    });

    return function () { };
  }

  
);

/**
 * Plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2017 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/**
 * This class contains all core logic for the code plugin.
 *
 * @class tinymce.code.Plugin
 * @private
 */
define(
  'tinymce.plugins.code.Plugin',
  [
    'tinymce.core.dom.DOMUtils',
    'tinymce.core.PluginManager'
  ],
  function (DOMUtils, PluginManager) {
    PluginManager.add('code', function (editor) {
      function showDialog() {
        var win = editor.windowManager.open({
          title: "Source code",
          body: {
            type: 'textbox',
            name: 'code',
            multiline: true,
            minWidth: editor.getParam("code_dialog_width", 600),
            minHeight: editor.getParam("code_dialog_height", Math.min(DOMUtils.DOM.getViewPort().h - 200, 500)),
            spellcheck: false,
            style: 'direction: ltr; text-align: left'
          },
          onSubmit: function (e) {
            // We get a lovely "Wrong document" error in IE 11 if we
            // don't move the focus to the editor before creating an undo
            // transation since it tries to make a bookmark for the current selection
            editor.focus();

            editor.undoManager.transact(function () {
              editor.setContent(e.data.code);
            });

            editor.selection.setCursorLocation();
            editor.nodeChanged();
          }
        });

        // Gecko has a major performance issue with textarea
        // contents so we need to set it when all reflows are done
        win.find('#code').value(editor.getContent({ source_view: true }));
      }

      editor.addCommand("mceCodeEditor", showDialog);

      editor.addButton('code', {
        icon: 'code',
        tooltip: 'Source code',
        onclick: showDialog
      });

      editor.addMenuItem('code', {
        icon: 'code',
        text: 'Source code',
        context: 'tools',
        onclick: showDialog
      });
    });

    return function () { };
  }
);